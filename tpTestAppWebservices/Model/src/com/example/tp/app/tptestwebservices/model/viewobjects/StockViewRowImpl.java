package com.example.tp.app.tptestwebservices.model.viewobjects;

import java.math.BigDecimal;

import java.sql.Date;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 02 16:52:40 PDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StockViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Createdby {
            public Object get(StockViewRowImpl obj) {
                return obj.getCreatedby();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setCreatedby((String)value);
            }
        }
        ,
        Createddate {
            public Object get(StockViewRowImpl obj) {
                return obj.getCreateddate();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setCreateddate((Date)value);
            }
        }
        ,
        Modifiedby {
            public Object get(StockViewRowImpl obj) {
                return obj.getModifiedby();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setModifiedby((String)value);
            }
        }
        ,
        Modifieddate {
            public Object get(StockViewRowImpl obj) {
                return obj.getModifieddate();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setModifieddate((Date)value);
            }
        }
        ,
        Stockexchangeuid {
            public Object get(StockViewRowImpl obj) {
                return obj.getStockexchangeuid();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setStockexchangeuid((BigDecimal)value);
            }
        }
        ,
        Stocksymbol {
            public Object get(StockViewRowImpl obj) {
                return obj.getStocksymbol();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setStocksymbol((String)value);
            }
        }
        ,
        Stockuid {
            public Object get(StockViewRowImpl obj) {
                return obj.getStockuid();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setStockuid((BigDecimal)value);
            }
        }
        ,
        StocksnapshotdataView {
            public Object get(StockViewRowImpl obj) {
                return obj.getStocksnapshotdataView();
            }

            public void put(StockViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(StockViewRowImpl object);

        public abstract void put(StockViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CREATEDBY = AttributesEnum.Createdby.index();
    public static final int CREATEDDATE = AttributesEnum.Createddate.index();
    public static final int MODIFIEDBY = AttributesEnum.Modifiedby.index();
    public static final int MODIFIEDDATE = AttributesEnum.Modifieddate.index();
    public static final int STOCKEXCHANGEUID = AttributesEnum.Stockexchangeuid.index();
    public static final int STOCKSYMBOL = AttributesEnum.Stocksymbol.index();
    public static final int STOCKUID = AttributesEnum.Stockuid.index();
    public static final int STOCKSNAPSHOTDATAVIEW = AttributesEnum.StocksnapshotdataView.index();

    /**
     * This is the default constructor (do not remove).
     */
    public StockViewRowImpl() {
    }

    /**
     * Gets Stock entity object.
     * @return the Stock
     */
    public EntityImpl getStock() {
        return (EntityImpl)getEntity(0);
    }

    /**
     * Gets the attribute value for CREATEDBY using the alias name Createdby.
     * @return the CREATEDBY
     */
    public String getCreatedby() {
        return (String) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATEDBY using the alias name Createdby.
     * @param value value to set the CREATEDBY
     */
    public void setCreatedby(String value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CREATEDDATE using the alias name Createddate.
     * @return the CREATEDDATE
     */
    public Date getCreateddate() {
        return (Date) getAttributeInternal(CREATEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATEDDATE using the alias name Createddate.
     * @param value value to set the CREATEDDATE
     */
    public void setCreateddate(Date value) {
        setAttributeInternal(CREATEDDATE, value);
    }

    /**
     * Gets the attribute value for MODIFIEDBY using the alias name Modifiedby.
     * @return the MODIFIEDBY
     */
    public String getModifiedby() {
        return (String) getAttributeInternal(MODIFIEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for MODIFIEDBY using the alias name Modifiedby.
     * @param value value to set the MODIFIEDBY
     */
    public void setModifiedby(String value) {
        setAttributeInternal(MODIFIEDBY, value);
    }

    /**
     * Gets the attribute value for MODIFIEDDATE using the alias name Modifieddate.
     * @return the MODIFIEDDATE
     */
    public Date getModifieddate() {
        return (Date) getAttributeInternal(MODIFIEDDATE);
    }

    /**
     * Sets <code>value</code> as attribute value for MODIFIEDDATE using the alias name Modifieddate.
     * @param value value to set the MODIFIEDDATE
     */
    public void setModifieddate(Date value) {
        setAttributeInternal(MODIFIEDDATE, value);
    }

    /**
     * Gets the attribute value for STOCKEXCHANGEUID using the alias name Stockexchangeuid.
     * @return the STOCKEXCHANGEUID
     */
    public BigDecimal getStockexchangeuid() {
        return (BigDecimal) getAttributeInternal(STOCKEXCHANGEUID);
    }

    /**
     * Sets <code>value</code> as attribute value for STOCKEXCHANGEUID using the alias name Stockexchangeuid.
     * @param value value to set the STOCKEXCHANGEUID
     */
    public void setStockexchangeuid(BigDecimal value) {
        setAttributeInternal(STOCKEXCHANGEUID, value);
    }

    /**
     * Gets the attribute value for STOCKSYMBOL using the alias name Stocksymbol.
     * @return the STOCKSYMBOL
     */
    public String getStocksymbol() {
        return (String) getAttributeInternal(STOCKSYMBOL);
    }

    /**
     * Sets <code>value</code> as attribute value for STOCKSYMBOL using the alias name Stocksymbol.
     * @param value value to set the STOCKSYMBOL
     */
    public void setStocksymbol(String value) {
        setAttributeInternal(STOCKSYMBOL, value);
    }

    /**
     * Gets the attribute value for STOCKUID using the alias name Stockuid.
     * @return the STOCKUID
     */
    public BigDecimal getStockuid() {
        return (BigDecimal) getAttributeInternal(STOCKUID);
    }

    /**
     * Sets <code>value</code> as attribute value for STOCKUID using the alias name Stockuid.
     * @param value value to set the STOCKUID
     */
    public void setStockuid(BigDecimal value) {
        setAttributeInternal(STOCKUID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link StocksnapshotdataView.
     */
    public RowIterator getStocksnapshotdataView() {
        return (RowIterator)getAttributeInternal(STOCKSNAPSHOTDATAVIEW);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    @Override
    public void setNewRowState(byte state) {
        if (state != Row.STATUS_INITIALIZED || getNewRowState() != Row.STATUS_NEW)
        { super.setNewRowState(state); }
        }
    
    public Number getSequenceNumber(String sequenceName){
        Number sequenceValue = new Number(0);
        if (sequenceName != null && ! sequenceName.isEmpty()){
            
            SequenceImpl sequenceImpl = new SequenceImpl(sequenceName,getDBTransaction());
            sequenceValue = sequenceImpl.getSequenceNumber();
            }
        return sequenceValue;
    }
}
